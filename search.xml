<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[排序算法]]></title>
      <url>/2018/06/09/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>最近在学习数据结构和算法，这里总结一下学习的排序算法。</p>
<h1 id="选择排序-SelectionSort"><a href="#选择排序-SelectionSort" class="headerlink" title="选择排序 - SelectionSort"></a>选择排序 - SelectionSort</h1><p><strong>基本思路</strong>:<br>假设有一个数组（如图所示），进行从小到大的排序。首先在整个数组范围里，找出要放在第一个位置的数，也就是最小的数：1，然后将1和现在的第一名的位置8进行换位，经过交换以后，1所处的位置就是最终排序所在的位置，这样就继续在剩下的部分找此时最小的数，也就是2，然后把2和相应的第二个位置所在的元素进行交换，此时1和2两个元素也已经是最终排好序的结果。整个过程以此类推，继续在剩下的部分中找此时最小的元素，然后进行交换位置。。。。。</p>
<p><img src="/2018/06/09/排序算法/SelectionSort.jpg" alt="选择排序"></p>
<p><strong>代码实现</strong>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//arr为要进行排序的数组，</div><div class="line">//n为数组的元素个数，即数组大小</div><div class="line"></div><div class="line">template&lt;typename T&gt;</div><div class="line">void selectionSort(T arr[],int n )&#123;</div><div class="line">    for(int i=0;i&lt;n;i++)&#123;</div><div class="line">        //寻找[i,n)区间里的最小值</div><div class="line">        int minIndex = i;  //记录当前所找的最小值所处索引的位置，初始化在位置i</div><div class="line">        for( int j= i+1;j&lt;n;j++)&#123;</div><div class="line">            if(arr[j] &lt; arr[minIndex]) //比较j位置的元素是否小于minIndex位置的元素，如果小于则更新当前的minIndex</div><div class="line">                minIndex = j;</div><div class="line">        &#125;  //此时已经找到了[i,n)区间里的最小值，并且记录其位置已经记录下来</div><div class="line">        swap(arr[i] , arr[minIndex]);  //如果使用std标准库不行，有可能需要引入algorithm标准库</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="插入排序-InsertionSort"><a href="#插入排序-InsertionSort" class="headerlink" title="插入排序 - InsertionSort"></a>插入排序 - InsertionSort</h1><p><strong>基本思路</strong>：<br>开始只考虑8这个元素的时候，它就已经排好序了。<br>接着看6这个元素,接下来的步骤是把6与它前面的数组进行比较，放在合适的位置，当6与8比较时，6&lt;8，所以6在8前面位置。<br>接着看2这个元素，2与它前面的数组进行比较，2&lt;8，所以2和8交换一次位置，2继续和6比较，2&lt;6，所以2和6交换位置，此时2在最前面的位置。<br>接着看3这个元素，3比8小，所以交换一次位置，3又比6小，所以交换一次位置，3比2大所以不进行交换操作，3插入在2和6中间，这时前面的4个元素排序完成。<br>以此类推。</p>
<p><img src="/2018/06/09/排序算法/InsertionSort_.png" alt="插入排序"></p>
<p><strong>代码实现</strong>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">template&lt;typename T&gt;</div><div class="line">void insertionSort (T arr[] , int n)&#123;</div><div class="line">    //从i=1开始，因为对插入排序来说，第0个位置不用考虑</div><div class="line">    for(int i = 1 ; i &lt; n ; i++)&#123;</div><div class="line">        //寻找arr[i]合适的插入位置</div><div class="line">        for(int j = i ; j &gt; 0 ; j-- )&#123;</div><div class="line">            if ( arr[j] &lt; arr[j-1] )</div><div class="line">                swap(arr[j] , arr[j-1]);</div><div class="line">            else //如果arr[i]元素已经在合适的位置，则可以直接进入下一个循环</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">      //下面是简化后的代码</div><div class="line">      //  for(int j = i ; j &gt; 0 &amp;&amp; arr[j] &lt; arr[j-1] ; j-- )&#123;</div><div class="line">      //      swap(arr[j] , arr[j-1]);</div><div class="line">      //  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>插入排序和选择排序相比，如果满足了条件就有机会提前结束，所以它的排序效率理论上要比选择排序高<br>但是实际上它的运行时间比选择排序要慢，这是因为其swap操作较多，浪费了时间，所以针对这个地方进行改进</p>
<p><img src="/2018/06/09/排序算法/InsertionSort-2_.png" alt="插入排序"></p>
<p><strong>改进代码思路</strong>:<br>首先,对位置0处的元素不作处理。</p>
<p>接着，看<code>位置1</code>处的<code>元素6</code>，首先对<code>元素6</code>做一个副本保存起来，然后看<code>元素6</code>是否应该在当前位置，即让他与前面的元素进行对比，如果小于前面的元素，则当前元素位置的值赋值为前一个元素的值，前一个元素位置的值赋值为刚才保存起来的副本（即当前元素的值）。（其实这也是相当于一个交换操作，在满足前一个元素大于当前元素值的情况下，进行交换值操作）</p>
<p>接着，看<code>位置2</code>处的<code>元素2</code>，首先对<code>元素2</code>做一个副本保存起来，然后<code>元素2</code>与前一个<code>元素8</code>比较，2&lt;8，则将<code>元素2</code>处的值赋值为8；接着再比较<code>位置1</code>处的<code>元素8</code>与<code>位置1</code>处的<code>元素6</code>的大小，将<code>位置1</code>处的值赋值为<code>元素6</code>，接着将<code>元素2</code>放在第一个位置。这样就少进行了交换的操作。</p>
<p>接着，看<code>元素3</code>，首先对<code>元素3</code>做一个副本保存起来，然后看<code>元素3</code>该不该放在当前位置，发现3&lt;8，所以这个位置赋值为8；然后看3是不是该放在刚才<code>元素8</code>的位置，发现<code>元素3</code>比<code>元素6</code>小，所以<code>元素6</code>放在刚才<code>元素8</code>的位置；然后看<code>元素3</code>是不是该放在刚才<code>元素6</code>的位置，发现<code>元素3</code>比<code>元素2</code>大，所以<code>元素3</code>应该放在这个位置。</p>
<p>这样很多交换操作就通过赋值进行取代了，所以性能更好。</p>
<p><strong>改进代码</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//改进代码</div><div class="line">template&lt;typename T&gt;</div><div class="line">void insertionSort (T arr[] , int n)&#123;</div><div class="line">    //从i=1开始</div><div class="line">    for(int i = 1 ; i &lt; n ; i++)&#123;</div><div class="line">        T e = arr[i]; //用e暂存i位置的数</div><div class="line">        int j;        //保存元素e应该插入的位置</div><div class="line">        for(j = i ; j &gt; 0 &amp;&amp; arr[j-1] &gt; e ; j--)&#123;</div><div class="line">            arr[j] = arr[j-1];</div><div class="line">        &#125;</div><div class="line">        arr[j] = e;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue-cli 目录结构笔记 及 一个简单电商项目的网页架构思路]]></title>
      <url>/2018/06/05/Vue-cli-%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0-%E5%8F%8A-%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%BD%91%E9%A1%B5%E6%9E%B6%E6%9E%84%E6%80%9D%E8%B7%AF/</url>
      <content type="html"><![CDATA[<p>学习了vue有一小段时间，期间中断去学习了java并且补了一下数据结构的基础，有点断层。跟着视频用vue2.0做了一个电商的小项目。思路稍微清晰了一些，但是因为中途转学其他的缘故，有一些东西还是忘掉了，这里总结一下使用vue-cli搭建项目的一些经验和教训。</p>
<p>首先是vue-cli的目录结构，这个是基于webpack的脚手架目录：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">|-- build                            // 项目构建(webpack)相关代码</div><div class="line">|   |-- build.js                     // 生产环境构建代码</div><div class="line">|   |-- check-version.js             // 检查node、npm等版本</div><div class="line">|   |-- utils.js                     // 构建工具相关</div><div class="line">|   |-- vue-loader.conf.js           // css加载器配置</div><div class="line">|   |-- webpack.base.conf.js         // webpack基础配置</div><div class="line">|   |-- webpack.dev.conf.js          // webpack开发环境配置</div><div class="line">|   |-- webpack.prod.conf.js         // webpack生产环境配置</div><div class="line">|-- config                           // 项目开发环境配置</div><div class="line">|   |-- dev.env.js                   // 开发环境变量</div><div class="line">|   |-- index.js                     // 项目一些配置变量(包括监听变量，打包路径等)</div><div class="line">|   |-- prod.env.js                  // 生产环境变量</div><div class="line">|   |-- test.env.js                  // 测试环境变量</div><div class="line">|-- node_modules                     //存放依赖的目录</div><div class="line">|-- src                              // 源码目录</div><div class="line">|   |-- assets                         // 静态资源（css文件，外部js文件）</div><div class="line">|   |-- components                     // vue公共组件</div><div class="line">|   |-- router                         // 路由配置</div><div class="line">|   |-- App.vue                        // 根组件</div><div class="line">|   |-- main.js                        // 入口文件，加载各种公共组件</div><div class="line">|-- static                           // 静态文件，比如一些图片，json数据等</div><div class="line">|-- test                             // 测试文件目录</div><div class="line">|-- .babelrc                         // ES6语法编译配置</div><div class="line">|-- .editorconfig                    // 定义代码格式</div><div class="line">|-- .gitignore                       // git上传需要忽略的文件格式</div><div class="line">|-- .postcssrc.js</div><div class="line">|-- README.md                        // 项目说明</div><div class="line">|-- index.html                       // 入口页面</div><div class="line">|-- package.json                     // 项目基本信息</div><div class="line">.</div></pre></td></tr></table></figure>
<p>当然不同版本的项目目录或者文件大同小异，基本都包括在上面了。</p>
<p>接下来讲一个平时用的比较多的网页排版及vue的大体配置。在此之前先介绍几个文件：</p>
<ol>
<li>index.html<br>一般只定义一个空的根节点，在main.js里面定义的实例将挂载在根节点下，内容都通过vue组件来填充。</li>
</ol>
<p><img src="/2018/06/05/Vue-cli-目录结构笔记-及-一个简单电商项目的网页架构思路/1.png" alt=""></p>
<ol>
<li><p>App.vue<br>App.vue 是个根组件。一个vue文件包括template,script,style三部分。<br>vue通常用es6来写，用export default导出。<br><code>&lt;style&gt;&lt;/style&gt;</code>默认是影响全局的，如需定义作用域只在该组件下起作用，需在标签上加scoped。<br>如要引入外部css文件，首先需给项目安装css-loader依赖包。使用import引入，比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line"></div><div class="line">  import &apos;./assets/css/bootstrap.css&apos;</div><div class="line"></div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>main.js<br>main.js是个入口文件。<br>这里:<code>template: &#39;&lt;App/&gt;&#39;</code>表示用<code>&lt;app&gt;&lt;/app&gt;</code>替换index.html里面的<code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code>。<br>这么做的目的很简单，<code>&lt;App /&gt;</code>他就是<code>App.vue</code>，template就是选择vue实例要加载哪个模板。最新的vue-cli脚手架模板现在是这个形式。App.vue是主程序，其他所有的.vue都是放在App.vue中，所以只需要加载App.vue就完全可以把其他的东西加载出来。<br><img src="/2018/06/05/Vue-cli-目录结构笔记-及-一个简单电商项目的网页架构思路/2.png" alt=""></p>
</li>
<li><p>router<br>router目录下的index.js即是路由配置文件</p>
<p><img src="/2018/06/05/Vue-cli-目录结构笔记-及-一个简单电商项目的网页架构思路/3.png" alt=""></p>
<p>router中可以设置多个路由，但是这里要先引入相应的组件，在进行设置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">//引入Vue框架</div><div class="line">import Vue from &apos;vue&apos;</div><div class="line"></div><div class="line">//引入路由依赖</div><div class="line">import Router from &apos;vue-router&apos;</div><div class="line"></div><div class="line">//引入各个页面组件</div><div class="line">import IndexPage from &apos;./components/index&apos;</div><div class="line">import DetailPage from &apos;./components/detail.vue&apos;</div><div class="line">import DetailAnaPage from &apos;./components/detail/analysis&apos;</div><div class="line">import DetailPubPage from &apos;./components/detail/publish&apos;</div><div class="line">import DetailCouPage from &apos;./components/detail/count&apos;</div><div class="line">import DetailForPage from &apos;./components/detail/forecast&apos;</div><div class="line">import OrderListPage from &apos;./components/orderList&apos;</div><div class="line">Vue.use(Router)</div><div class="line"></div><div class="line">export default new Router(&#123;</div><div class="line">  mode: &apos;history&apos;,</div><div class="line">  routes: [</div><div class="line">    &#123;</div><div class="line">      path: &apos;/&apos;,</div><div class="line">      component: IndexPage</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      path: &apos;/orderList&apos;,</div><div class="line">      component: OrderListPage</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      path: &apos;/detail&apos;,</div><div class="line">      component: DetailPage,</div><div class="line">      redirect: &apos;detail/analysis&apos;,</div><div class="line">      children: [</div><div class="line">        &#123;</div><div class="line">          path: &apos;forecast&apos;,</div><div class="line">          component: DetailForPage</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          path: &apos;analysis&apos;,</div><div class="line">          component: DetailAnaPage</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          path: &apos;publish&apos;,</div><div class="line">          component: DetailPubPage</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          path: &apos;count&apos;,</div><div class="line">          component: DetailCouPage</div><div class="line">        &#125;</div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>这里介绍一个基础的vue模板构建思路：<br><img src="/2018/06/05/Vue-cli-目录结构笔记-及-一个简单电商项目的网页架构思路/5.png" alt=""></p>
<p><code>App.vue</code>如下，其中的router的配置可以参见上面的代码</p>
<p><img src="/2018/06/05/Vue-cli-目录结构笔记-及-一个简单电商项目的网页架构思路/4.png" alt="App.vue"><br>当然这里只设置了简单的内容，具体的方法和数据及样式根据不同的需求进行补充即可。</p>
<p>当然这只是一种简单的设计思路，做项目时可以用这个做为参考，但是不要被限制。</p>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
